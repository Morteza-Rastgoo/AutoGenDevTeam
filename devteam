#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CONFIG_DIR="$SCRIPT_DIR/config"
WORKSPACE_DIR="$SCRIPT_DIR/workspace"
TUNNEL_PID_FILE="$CONFIG_DIR/.tunnel.pid"
OLLAMA_PID_FILE="$CONFIG_DIR/.ollama.pid"

# Load environment variables
load_env() {
    if [ -f "$SCRIPT_DIR/.env" ]; then
        set -a
        source "$SCRIPT_DIR/.env"
        set +a
    fi

    # Set defaults if not provided
    OLLAMA_MODEL=${OLLAMA_MODEL:-"llama2"}
    OLLAMA_LOCAL_PORT=${OLLAMA_LOCAL_PORT:-"11434"}
    
    # Disable Docker for AutoGen
    export AUTOGEN_USE_DOCKER="False"
    export PYTHONPATH="$SCRIPT_DIR:$PYTHONPATH"
}

# Ensure virtual environment exists and is activated
setup_env() {
    mkdir -p "$CONFIG_DIR" "$WORKSPACE_DIR"
    
    if [ ! -d "$SCRIPT_DIR/venv" ]; then
        echo "Setting up Python environment..."
        python3 -m venv "$SCRIPT_DIR/venv"
        source "$SCRIPT_DIR/venv/bin/activate"
        
        # Create requirements file if it doesn't exist
        if [ ! -f "$CONFIG_DIR/requirements.txt" ]; then
            cat > "$CONFIG_DIR/requirements.txt" << EOL
pyautogen>=0.2.8
requests>=2.31.0
termcolor>=2.3.0
python-dotenv>=1.0.0
fix-busted-json>=0.1.0
ollama>=0.1.0
EOL
        fi
        
        echo "Upgrading pip..."
        python3 -m pip install --upgrade pip >/dev/null 2>&1
        
        echo "Installing Python packages..."
        python3 -m pip install -r "$CONFIG_DIR/requirements.txt"
    else
        source "$SCRIPT_DIR/venv/bin/activate"
    fi
    
    # Verify installation
    if ! python3 -c "import autogen" 2>/dev/null; then
        echo "Error: Failed to install required Python packages."
        echo "Try removing the venv directory and running setup again."
        exit 1
    fi
}

# Check if remote configuration is available in environment
check_remote_config() {
    local missing_vars=()
    local required_vars=("OLLAMA_REMOTE_HOST" "OLLAMA_REMOTE_USER" "OLLAMA_SSH_KEY" "OLLAMA_REMOTE_PORT")
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -eq 0 ]; then
        return 0
    else
        if [ "$1" = "show" ]; then
            echo "Missing required environment variables:"
            printf '%s\n' "${missing_vars[@]}"
            echo "Please set them in .env file or export them directly"
        fi
        return 1
    fi
}

# Setup SSH tunnel to remote Ollama server
setup_tunnel() {
    if ! check_remote_config; then
        echo "Remote configuration not found. Running local Ollama."
        return 1
    fi
    
    if [ -f "$TUNNEL_PID_FILE" ]; then
        OLD_PID=$(cat "$TUNNEL_PID_FILE")
        if kill -0 "$OLD_PID" 2>/dev/null; then
            echo "Tunnel already running"
            return 0
        fi
        rm "$TUNNEL_PID_FILE"
    fi

    echo "Setting up tunnel to remote Ollama server..."
    ssh -f -N -L "${OLLAMA_LOCAL_PORT}:localhost:${OLLAMA_REMOTE_PORT}" \
        "${OLLAMA_REMOTE_USER}@${OLLAMA_REMOTE_HOST}" \
        -i "${OLLAMA_SSH_KEY}" \
        -o StrictHostKeyChecking=accept-new
    
    if [ $? -eq 0 ]; then
        echo $! > "$TUNNEL_PID_FILE"
        sleep 2
        echo "Tunnel established successfully"
        return 0
    else
        echo "Failed to establish tunnel"
        return 1
    fi
}

# Stop SSH tunnel
stop_tunnel() {
    if [ -f "$TUNNEL_PID_FILE" ]; then
        PID=$(cat "$TUNNEL_PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill "$PID"
            rm "$TUNNEL_PID_FILE"
            echo "Tunnel stopped"
        fi
    fi
}

# Test Ollama connection
test_ollama_connection() {
    local url="$1"
    local max_retries=5
    local retry=0
    
    while [ $retry -lt $max_retries ]; do
        if curl -s "$url/api/version" >/dev/null 2>&1; then
            return 0
        fi
        retry=$((retry + 1))
        sleep 1
    done
    return 1
}

# Ensure Ollama is running with required model
ensure_ollama() {
    local base_url="http://localhost:${OLLAMA_LOCAL_PORT}"
    
    if check_remote_config; then
        if ! setup_tunnel; then
            echo "Failed to set up remote connection. Falling back to local Ollama."
            setup_local_ollama
        fi
    else
        setup_local_ollama
    fi
    
    if ! test_ollama_connection "$base_url"; then
        echo "Error: Could not connect to Ollama server at $base_url"
        exit 1
    fi
    
    export OLLAMA_BASE_URL="$base_url"
}

# Setup local Ollama instance
setup_local_ollama() {
    if ! command -v ollama >/dev/null 2>&1; then
        echo "Error: Ollama is not installed. Please install it first."
        echo "Visit: https://ollama.com/download"
        exit 1
    fi

    if ! pgrep -x "ollama" > /dev/null; then
        echo "Starting Ollama server..."
        ollama serve >/dev/null 2>&1 &
        echo $! > "$OLLAMA_PID_FILE"
        sleep 3
    fi
    
    echo "Checking Ollama model..."
    if ! ollama list 2>/dev/null | grep -q "${OLLAMA_MODEL}"; then
        echo "Pulling ${OLLAMA_MODEL} model..."
        if ! ollama pull "${OLLAMA_MODEL}" >/dev/null 2>&1; then
            echo "Error: Failed to pull ${OLLAMA_MODEL} model"
            exit 1
        fi
    fi
}

# Main team interaction script
run_team() {
    local task_msg="$1"
    python3 - << EOF
import autogen
from typing import Dict, List
import os
from termcolor import colored

# Load configuration
config_list = [{
    "model": os.getenv("OLLAMA_MODEL", "llama2"),
    "base_url": os.getenv("OLLAMA_BASE_URL", "http://localhost:11434/api"),
    "api_type": "ollama",
    "timeout": 60,
    "seed": 42,
    "context_length": 4096
}]

TEAM_ROLES = {
    "architect": """You are a software architect. ONLY:
    1. Create directory structure
    2. List files to create
    3. Define interfaces
    NO explanations. NO discussion. Just code structure.""",
    
    "developer": """You are a Python developer. ONLY:
    1. Write code in specified files
    2. Implement error handling
    3. Add unit tests
    NO explanations. NO discussion. Just write code.""",
    
    "reviewer": """You are a code reviewer. ONLY:
    1. List specific issues
    2. Provide fix in code
    Stay silent if no issues found."""
}

# Configure code execution settings
code_execution_config = {
    "use_docker": False,
    "work_dir": "samples/calculator",
    "last_n_messages": 3,
    "timeout": 60
}

try:
    task = """${task_msg}"""
    
    # Create the samples/calculator directory if it doesn't exist
    os.makedirs("samples/calculator", exist_ok=True)
    
    # Create user proxy with specific configuration
    user_proxy = autogen.UserProxyAgent(
        name="user",
        human_input_mode="NEVER",
        max_consecutive_auto_reply=10,
        code_execution_config=code_execution_config,
        system_message="Execute code. Report only errors."
    )

    # Create team members with configuration
    config = {
        "config_list": config_list,
        "timeout": 60,
        "temperature": 0,
        "max_tokens": 2000
    }
    
    architect = autogen.AssistantAgent(
        name="architect",
        llm_config=config,
        system_message=TEAM_ROLES["architect"]
    )
    
    developer = autogen.AssistantAgent(
        name="developer",
        llm_config=config,
        system_message=TEAM_ROLES["developer"]
    )
    
    reviewer = autogen.AssistantAgent(
        name="reviewer",
        llm_config=config,
        system_message=TEAM_ROLES["reviewer"]
    )

    # Set up group chat with specific order
    groupchat = autogen.GroupChat(
        agents=[user_proxy, architect, developer, reviewer],
        messages=[],
        max_round=8,
        speaker_selection_method="round_robin"
    )
    manager = autogen.GroupChatManager(groupchat=groupchat)

    print(colored("\nStarting task execution...", "green"))
    print(colored("Task: " + task + "\n", "yellow"))

    # Start the task with clear instructions
    user_proxy.initiate_chat(
        manager,
        message=f"""Task: {task}
        
        Rules:
        1. Write code only
        2. No discussions
        3. No explanations
        4. Move to next if no issues
        """
    )

except Exception as e:
    print(colored(f"\nError: {str(e)}", "red"))
    print(colored("Please check your configuration and try again.", "yellow"))
    exit(1)
EOF
}

# Cleanup function
cleanup() {
    stop_tunnel
    if [ -f "$OLLAMA_PID_FILE" ]; then
        PID=$(cat "$OLLAMA_PID_FILE")
        if kill -0 "$PID" 2>/dev/null; then
            kill "$PID"
            rm "$OLLAMA_PID_FILE"
            echo "Ollama server stopped"
        fi
    fi
    exit 0
}

# Set up trap for cleanup
trap cleanup EXIT INT TERM

# Load environment variables
load_env

# Command line interface
case "$1" in
    "setup")
        setup_env
        ensure_ollama
        echo "DevTeam environment is ready!"
        ;;
    "remote")
        case "$2" in
            "status")
                if check_remote_config; then
                    echo "Remote configuration is set:"
                    echo "Host: $OLLAMA_REMOTE_HOST"
                    echo "User: $OLLAMA_REMOTE_USER"
                    echo "Port: $OLLAMA_REMOTE_PORT"
                    echo "SSH Key: $OLLAMA_SSH_KEY"
                    echo "Model: $OLLAMA_MODEL"
                    echo "Local Port: $OLLAMA_LOCAL_PORT"
                else
                    check_remote_config "show"
                fi
                ;;
            "stop")
                stop_tunnel
                ;;
            *)
                echo "Usage:"
                echo "  ./devteam remote status  - Check remote configuration status"
                echo "  ./devteam remote stop    - Stop remote tunnel"
                exit 1
                ;;
        esac
        ;;
    "task")
        if [ -z "$2" ]; then
            echo "Usage: ./devteam task 'your task description'"
            exit 1
        fi
        setup_env
        ensure_ollama
        run_team "$2"
        ;;
    *)
        echo "Usage:"
        echo "  ./devteam setup              - Set up the development environment"
        echo "  ./devteam remote status      - Check remote configuration"
        echo "  ./devteam remote stop        - Stop remote tunnel"
        echo "  ./devteam task 'description' - Assign a task to the team"
        exit 1
        ;;
esac 